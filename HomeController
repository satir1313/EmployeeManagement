using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using FirstApp.Models;
using FirstApp.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace FirstApp.Controllers
{
   // [Route("Home")] //to avoid repetition of Home/ in sub atributes
   [Authorize]
   [Route ("[controller]/[action]")]
   //controller will be replaced by controller class in this case home in runtime
   // with this routing trchnique we don't need to change routing map by changing our controller class name
    public class HomeController : Controller
    {    
        private readonly IEmployeeRepository _employeeRepository ;
        private readonly IHostingEnvironment hostingEnvironment ;

        public HomeController(IEmployeeRepository employeeRepository, IHostingEnvironment hostingEnvironment )
        {
            _employeeRepository = employeeRepository;
            this.hostingEnvironment = hostingEnvironment;
        }

      
        [Route("~/")] //to avoid error in root page
        [AllowAnonymous]
        public ViewResult Index()
        {
            var model = _employeeRepository.GetAllEmployees();
            return View(model);
        }

        
        [AllowAnonymous]
        public ViewResult Details(int? id)
        {
            //throw new Exception("Error Occured");
            Employee employee = _employeeRepository.GetEmployee(id.Value);

            if(employee == null)
            {
                Response.StatusCode = 404;
                return View("EmployeeNotFound", id.Value);
            }
            HomeDetailsViewModels homeDetailsViewModels = new HomeDetailsViewModels()
            {
                //Employee = _employeeRepository.GetEmployee(id??1),
                Employee = employee,
                pageTitle = "Employee Details"
            };

            return View(homeDetailsViewModels);

           // Employee modelEmployee = _employeeRepository.GetEmployee(1);
            //ViewBag.pageTitle = "Employee Details";
            //we can use viewbag to pass data to details page ut better is to use view model folder and class
            //return View(modelEmployee);
            //we pass a model to View to be able to use strongly type method to pass data to view in detals.cshtml
            //@model FirstApp.Models.Employee; will be added on the top of cshtml file to access to all object properties
        }

        [HttpGet]
        public ViewResult Create()
        {
            return View();
        }
        
        [HttpGet]
        public ViewResult Edit(int id)
        {
            Employee employee = _employeeRepository.GetEmployee(id);
            EmployeeEditViewModel employeeEditViewModel = new EmployeeEditViewModel
            {
                Id = employee.Id,
                Name = employee.Name,
                Email = employee.Email,
                Department = employee.Department,
                ExistingPhotoPath = employee.PhotoPath
            };
            return View(employeeEditViewModel);
        }

        [HttpPost]
        public IActionResult Edit(EmployeeEditViewModel model)
        {
            if (ModelState.IsValid)
            {
                Employee employee = _employeeRepository.GetEmployee(model.Id);
                employee.Name = model.Name;
                employee.Email = model.Email;
                employee.Department = model.Department;

                if (model.Photos != null)
                {
                    if (model.ExistingPhotoPath != null)
                    {
                       string filePath = Path.Combine(hostingEnvironment.WebRootPath,
                           "images", model.ExistingPhotoPath);
                       System.IO.File.Delete(filePath);
                    }
                    employee.PhotoPath = ProcessUploadedFile(model);
                }
             
                _employeeRepository.Update(employee);

                return RedirectToAction("index");
            }
            return View();
        }

        private string ProcessUploadedFile(EmployeeCreateViewModel model)
        {
            string uniqeFileName = null;
            if (model.Photos != null && model.Photos.Count > 0)
            {
                foreach (IFormFile photo in model.Photos)
                {
                    string uplodeFolder = Path.Combine(hostingEnvironment.WebRootPath, "images");
                    uniqeFileName = Guid.NewGuid().ToString() + "_" + photo.FileName;
                    string filePath = Path.Combine(uplodeFolder, uniqeFileName);
                    using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        photo.CopyTo(fileStream);
                    }
                    
                }
            }

            return uniqeFileName;
        }

        [HttpPost]
        public IActionResult Create(EmployeeCreateViewModel model)
        {
            if (ModelState.IsValid)
            {
                string uniqeFileName = ProcessUploadedFile(model);
                
                Employee newEmployee = new Employee
                {
                    Name = model.Name,
                    Email = model.Email,
                    Department = model.Department,
                    PhotoPath = uniqeFileName
                };
                _employeeRepository.Add(newEmployee);

                return RedirectToAction("Details", new { id = newEmployee.Id });
            }
            return View();
        }
    }
}
